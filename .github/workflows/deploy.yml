name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Generate version info
        run: |
          echo "DEPLOY_VERSION=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV
          echo "BUILD_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
          echo "Generated version: $(date +%Y%m%d_%H%M%S)"

      - name: Create environment file
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEXT_PUBLIC_STRAPI_URL=${{ secrets.NEXT_PUBLIC_STRAPI_URL }}" >> .env
          echo "NEXT_PUBLIC_STRAPI_API_KEY=${{ secrets.NEXT_PUBLIC_STRAPI_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_RESEND_API_KEY=${{ secrets.NEXT_PUBLIC_RESEND_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_GOOGLE_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAP_ID }}" >> .env
          echo "NEXT_PUBLIC_APP_VERSION=${{ env.DEPLOY_VERSION }}" >> .env
          echo "NEXT_PUBLIC_BUILD_HASH=${{ env.BUILD_HASH }}" >> .env

      - name: Build project
        run: npm run build

      - name: Add version info to build
        run: |
          # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏
          cat > ./out/version.json << EOF
          {
            "version": "${{ env.DEPLOY_VERSION }}",
            "buildHash": "${{ env.BUILD_HASH }}",
            "buildNumber": "${{ env.BUILD_NUMBER }}",
            "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}"
          }
          EOF
          
          # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥ —Å –≤–µ—Ä—Å–∏–µ–π –≤ HTML —Ñ–∞–π–ª—ã
          find ./out -name "*.html" -exec sed -i 's/<head>/<head>\n  <meta name="app-version" content="${{ env.DEPLOY_VERSION }}">\n  <meta name="build-hash" content="${{ env.BUILD_HASH }}">/' {} \;
          
          # –°–æ–∑–¥–∞–µ–º JavaScript —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π
          echo "window.APP_VERSION = '${{ env.DEPLOY_VERSION }}';" > ./out/version.js
          echo "window.BUILD_HASH = '${{ env.BUILD_HASH }}';" >> ./out/version.js
          echo "window.BUILD_DATE = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';" >> ./out/version.js
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –≤–µ—Ä—Å–∏–µ–π –≤ –Ω–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          find ./out -name "*.css" -exec sed -i '1i/* Version: ${{ env.DEPLOY_VERSION }} | Build: ${{ env.BUILD_HASH }} */' {} \;
          find ./out -name "*.js" -exec sed -i '1i/* Version: ${{ env.DEPLOY_VERSION }} | Build: ${{ env.BUILD_HASH }} */' {} \;

      - name: Verify build output
        run: |
          if [ ! -d "./out" ]; then
            echo "Error: ./out directory not found after build"
            exit 1
          fi
          echo "Build output contents:"
          ls -la ./out

      - name: Deploy via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          server: ${{ secrets.SFTP_SERVER }}
          port: ${{ secrets.SFTP_PORT }}
          username: ${{ secrets.SFTP_USERNAME }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          local_path: './out/*'
          remote_path: '/web/htdocs/www.finest-tobacco.com/home/www/'
          sftp_only: true

      - name: Clear server cache and add cache headers
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          ssh -i /tmp/ssh_key -p 2222 -o StrictHostKeyChecking=no \
          b992k7w-ssh@finest-tobacco.com "
          # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
          find ~/domains/*/public_html -name '*.html' -exec touch {} \; 2>/dev/null || true
          find ~/domains/*/public_html -name '*.css' -exec touch {} \; 2>/dev/null || true
          find ~/domains/*/public_html -name '*.js' -exec touch {} \; 2>/dev/null || true
          
          # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º .htaccess —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
          cat > ~/domains/*/public_html/.htaccess << 'HTACCESS_EOF'
          # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css 'access plus 1 year'
            ExpiresByType application/javascript 'access plus 1 year'
            ExpiresByType image/png 'access plus 1 year'
            ExpiresByType image/jpg 'access plus 1 year'
            ExpiresByType image/jpeg 'access plus 1 year'
            ExpiresByType image/gif 'access plus 1 year'
            ExpiresByType image/svg+xml 'access plus 1 year'
            ExpiresByType image/webp 'access plus 1 year'
          </IfModule>
          
          # –î–ª—è HTML —Ñ–∞–π–ª–æ–≤ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
          <FilesMatch \"\.(html|htm)$\">
            Header set Cache-Control 'no-cache, must-revalidate'
            Header set Pragma 'no-cache'
            Header set Expires 'Thu, 01 Jan 1970 00:00:00 GMT'
          </FilesMatch>
          
          # –î–ª—è version.json - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å
          <FilesMatch \"version\.(json|js)$\">
            Header set Cache-Control 'no-store, no-cache, must-revalidate, max-age=0'
            Header set Pragma 'no-cache'
            Header set Expires 'Thu, 01 Jan 1970 00:00:00 GMT'
          </FilesMatch>
          HTACCESS_EOF
          
          echo 'Deploy completed at: $(date)'
          echo 'Deployed version: ${{ env.DEPLOY_VERSION }}'
          echo 'Build hash: ${{ env.BUILD_HASH }}'
          echo 'Latest files:'
          ls -lat ~/domains/*/public_html/ 2>/dev/null | head -10 || ls -lat ~/public_html/ 2>/dev/null | head -10 || echo 'Could not list files'
          "
          
          rm /tmp/ssh_key

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üì¶ Version: ${{ env.DEPLOY_VERSION }}"
          echo "üî® Build Hash: ${{ env.BUILD_HASH }}"
          echo "üèóÔ∏è Build Number: ${{ env.BUILD_NUMBER }}"
          echo "‚è∞ Deploy Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "üåê Site: https://www.finest-tobacco.com"
          echo "üìä Version Info: https://www.finest-tobacco.com/version.json"